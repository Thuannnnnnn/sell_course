import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { NotifyService } from '../notify.service';
import { Course } from '../../course/entities/course.entity';
import { User } from '../../user/entities/user.entity';
import { Category } from '../../category/entities/category.entity';
import { NotificationType, UserRole } from '../constants/notification.constants';
import { CreateNotifyDto } from '../dto/notify.dto';

@Injectable()
export class AutomaticNotificationService {
  constructor(
    private readonly notifyService: NotifyService,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Course)
    private readonly courseRepository: Repository<Course>,
    @InjectRepository(Category)
    private readonly categoryRepository: Repository<Category>,
  ) {}

  /**
   * G·ª≠i th√¥ng b√°o t·ª± ƒë·ªông khi instructor t·∫°o kh√≥a h·ªçc m·ªõi
   */
  async handleCourseCreated(courseId: string): Promise<void> {
    try {
      // L·∫•y th√¥ng tin kh√≥a h·ªçc v·ªõi instructor v√† category
      const course = await this.courseRepository.findOne({
        where: { courseId },
        relations: ['instructor', 'category'],
      });

      if (!course) {
        throw new Error(`Course with ID ${courseId} not found`);
      }

      // 1. Th√¥ng b√°o cho CourseReviewer: "Kh√≥a h·ªçc m·ªõi c·∫ßn review"
      await this.sendNotificationToCourseReviewers(course);

      // 2. Th√¥ng b√°o cho Admin: "Kh√≥a h·ªçc m·ªõi ƒë∆∞·ª£c t·∫°o"
      await this.sendNotificationToAdmins(course);

      // 3. Th√¥ng b√°o cho Content Manager: "Kh√≥a h·ªçc m·ªõi trong category [X]"
      await this.sendNotificationToContentManagers(course);

    } catch (error) {
      console.error('Error in handleCourseCreated:', error);
      throw error;
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o t·ª± ƒë·ªông khi instructor c·∫≠p nh·∫≠t kh√≥a h·ªçc
   */
  async handleCourseUpdated(courseId: string): Promise<void> {
    try {
      // L·∫•y th√¥ng tin kh√≥a h·ªçc v·ªõi instructor v√† category
      const course = await this.courseRepository.findOne({
        where: { courseId },
        relations: ['instructor', 'category'],
      });

      if (!course) {
        throw new Error(`Course with ID ${courseId} not found`);
      }

      // 1. Th√¥ng b√°o cho CourseReviewer: "Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a, c·∫ßn review l·∫°i"
      await this.sendUpdateNotificationToCourseReviewers(course);

      // 2. Th√¥ng b√°o cho Admin: "Kh√≥a h·ªçc [X] ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"
      await this.sendUpdateNotificationToAdmins(course);

    } catch (error) {
      console.error('Error in handleCourseUpdated:', error);
      throw error;
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o cho CourseReviewers khi c√≥ kh√≥a h·ªçc m·ªõi
   */
  private async sendNotificationToCourseReviewers(course: Course): Promise<void> {
    try {
      const notificationData: CreateNotifyDto = {
        title: 'üìö Kh√≥a h·ªçc m·ªõi c·∫ßn review',
        message: `Kh√≥a h·ªçc "${course.title}" c·ªßa gi·∫£ng vi√™n ${course.instructor.username} c·∫ßn ƒë∆∞·ª£c review. Vui l√≤ng ki·ªÉm tra v√† ph√™ duy·ªát.`,
        type: NotificationType.COURSE_REVIEWER,
      };

      await this.notifyService.create(notificationData);
      console.log(`‚úÖ Notification sent to CourseReviewers for course: ${course.title}`);
    } catch (error) {
      console.error('‚ùå Error sending notification to CourseReviewers');
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn flow ch√≠nh
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o cho Admins khi c√≥ kh√≥a h·ªçc m·ªõi
   */
  private async sendNotificationToAdmins(course: Course): Promise<void> {
    try {
      const notificationData: CreateNotifyDto = {
        title: 'üéì Kh√≥a h·ªçc m·ªõi ƒë∆∞·ª£c t·∫°o',
        message: `Kh√≥a h·ªçc "${course.title}" ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi gi·∫£ng vi√™n ${course.instructor.username} trong danh m·ª•c ${course.category.name}.`,
        type: NotificationType.ADMIN,
      };

      await this.notifyService.create(notificationData);
      console.log(`‚úÖ Notification sent to Admins for course: ${course.title}`);
    } catch (error) {
      console.error('‚ùå Error sending notification to Admins:');
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o cho Content Managers khi c√≥ kh√≥a h·ªçc m·ªõi trong category
   */
  private async sendNotificationToContentManagers(course: Course): Promise<void> {
    try {
      const notificationData: CreateNotifyDto = {
        title: `üìÇ Kh√≥a h·ªçc m·ªõi trong danh m·ª•c ${course.category.name}`,
        message: `Kh√≥a h·ªçc "${course.title}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh m·ª•c ${course.category.name}. Vui l√≤ng ki·ªÉm tra n·ªôi dung v√† c·∫•u tr√∫c kh√≥a h·ªçc.`,
        type: NotificationType.CONTENT_MANAGER,
      };

      await this.notifyService.create(notificationData);
      console.log(`‚úÖ Notification sent to Content Managers for course: ${course.title}`);
    } catch (error) {
      console.error('‚ùå Error sending notification to Content Managers:');
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t cho CourseReviewers
   */
  private async sendUpdateNotificationToCourseReviewers(course: Course): Promise<void> {
    try {
      const notificationData: CreateNotifyDto = {
        title: 'üîÑ Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a',
        message: `Kh√≥a h·ªçc "${course.title}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi gi·∫£ng vi√™n ${course.instructor.username}. Vui l√≤ng review l·∫°i c√°c thay ƒë·ªïi.`,
        type: NotificationType.COURSE_REVIEWER,
      };

      await this.notifyService.create(notificationData);
      console.log(`‚úÖ Update notification sent to CourseReviewers for course: ${course.title}`);
    } catch (error) {
      console.error('‚ùå Error sending update notification to CourseReviewers:');
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t cho Admins
   */
  private async sendUpdateNotificationToAdmins(course: Course): Promise<void> {
    try {
      const notificationData: CreateNotifyDto = {
        title: '‚úèÔ∏è Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
        message: `Kh√≥a h·ªçc "${course.title}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi gi·∫£ng vi√™n ${course.instructor.username}. Th·ªùi gian c·∫≠p nh·∫≠t: ${new Date().toLocaleString('vi-VN')}.`,
        type: NotificationType.ADMIN,
      };

      await this.notifyService.create(notificationData);
      console.log(`‚úÖ Update notification sent to Admins for course: ${course.title}`);
    } catch (error) {
      console.error('‚ùå Error sending update notification to Admins:');
    }
  }

  /**
   * L·∫•y danh s√°ch users theo role
   */
  private async getUsersByRole(role: UserRole): Promise<User[]> {
    return await this.userRepository.find({
      where: { role: role },
    });
  }

  /**
   * Ki·ªÉm tra xem c√≥ users n√†o v·ªõi role c·ª• th·ªÉ kh√¥ng
   */
  private async hasUsersWithRole(role: UserRole): Promise<boolean> {
    const count = await this.userRepository.count({
      where: { role: role },
    });
    return count > 0;
  }
}